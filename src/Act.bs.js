// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


var callWithFinally = ((fn, finallyCb) => {
    try {
      return fn()
    } finally {
      finallyCb()
    }
  });

function initialNotify(context) {
  var iterator = context.q;
  context.q = [];
  for(var effectsIdx = 0 ,effectsIdx_finish = iterator.length; effectsIdx < effectsIdx_finish; ++effectsIdx){
    var effects = iterator[effectsIdx];
    for(var effectIdx = 0 ,effectIdx_finish = effects.length; effectIdx < effectIdx_finish; ++effectIdx){
      effects[effectIdx]();
    }
  }
}

var context = {
  r: undefined,
  u: undefined,
  q: [],
  v: 0,
  p: undefined,
  n: initialNotify
};

function getNotify(param) {
  if (context.n === initialNotify) {
    return function () {
      return initialNotify(context);
    };
  } else {
    return context.n;
  }
}

function setNotify(notify) {
  context.n = notify;
}

function make(initial) {
  return {
          TAG: /* Value */0,
          _0: {
            s: initial,
            v: -1,
            e: []
          }
        };
}

function computed(fn) {
  return {
          TAG: /* Computed */1,
          _0: {
            s: undefined,
            v: -1,
            f: fn,
            p: []
          }
        };
}

function get(act) {
  if (act.TAG === /* Value */0) {
    var value = act._0;
    if (value.v !== context.v) {
      value.v = context.v;
      var match = context.u;
      var match$1 = context.r;
      if (match !== undefined) {
        value.e.splice(value.e.indexOf(match), 1);
      } else if (match$1 !== undefined) {
        value.e.push(match$1);
      }
      
    }
    
  } else {
    var computed = act._0;
    if (computed.v !== context.v || context.r === undefined) {
      var computedPubs = computed.p;
      var prevPubs = context.p;
      context.p = undefined;
      var isEmptyComputedPubs = computedPubs.length === 0;
      if (isEmptyComputedPubs || computedPubs.some(function (el) {
              return get(el.a) !== el.s;
            })) {
        var newPubs = isEmptyComputedPubs ? computedPubs : [];
        context.p = newPubs;
        computed.p = newPubs;
        computed.s = computed.f(undefined);
      }
      context.p = prevPubs;
      computed.v = context.v;
    }
    
  }
  var pubs = context.p;
  if (pubs !== undefined) {
    var tmp;
    tmp = act._0.s;
    pubs.push({
          a: act,
          s: tmp
        });
  }
  return act._0.s;
}

function set(act, state) {
  if (act.TAG === /* Value */0) {
    var value = act._0;
    value.s = state;
    if (context.q.push(value.e) === 1) {
      Promise.resolve(undefined).then(function (param) {
            getNotify(undefined)();
          });
    }
    value.e = [];
    if (value.v !== context.v) {
      value.v = context.v;
      var match = context.u;
      var match$1 = context.r;
      if (match !== undefined) {
        value.e.splice(value.e.indexOf(match), 1);
      } else if (match$1 !== undefined) {
        value.e.push(match$1);
      }
      
    }
    var pubs = context.p;
    if (pubs === undefined) {
      return ;
    }
    var tmp;
    tmp = act._0.s;
    pubs.push({
          a: act,
          s: tmp
        });
    return ;
  }
  throw new Error("Act.set is not supported for computed acts.");
}

function subscribe(act, cb) {
  var subscribtionContext = {
    q: cb,
    s: cb
  };
  var effect = function () {
    if (subscribtionContext.q === context.q) {
      return ;
    }
    subscribtionContext.q = context.q;
    context.v = context.v + 1;
    var prevRoot = context.r;
    context.r = effect;
    return callWithFinally((function () {
                  var calculatedState = get(act);
                  if (subscribtionContext.s !== calculatedState) {
                    subscribtionContext.s = calculatedState;
                    return cb(calculatedState);
                  }
                  
                }), (function () {
                  context.r = prevRoot;
                }));
  };
  effect();
  return function (param) {
    context.v = context.v + 1;
    context.u = effect;
    get(act);
    context.u = undefined;
  };
}

exports.make = make;
exports.computed = computed;
exports.get = get;
exports.set = set;
exports.subscribe = subscribe;
exports.getNotify = getNotify;
exports.setNotify = setNotify;
/* No side effect */
