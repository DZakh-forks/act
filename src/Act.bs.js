// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


var callWithFinally = ((fn, finallyCb) => {
    try {
      return fn()
    } finally {
      finallyCb()
    }
  });

function initialNotify(context) {
  var iterator = context.q;
  context.q = [];
  for(var effectsIdx = 0 ,effectsIdx_finish = iterator.length; effectsIdx < effectsIdx_finish; ++effectsIdx){
    var effects = iterator[effectsIdx];
    for(var effectIdx = 0 ,effectIdx_finish = effects.length; effectIdx < effectIdx_finish; ++effectIdx){
      effects[effectIdx]();
    }
  }
}

var context = {
  r: undefined,
  u: undefined,
  q: [],
  v: 0,
  n: initialNotify
};

function getNotify(param) {
  if (context.n === initialNotify) {
    return function () {
      return initialNotify(context);
    };
  } else {
    return context.n;
  }
}

function setNotify(notify) {
  context.n = notify;
}

function make(initial) {
  return {
          s: initial,
          e: [],
          v: -1
        };
}

function get(act) {
  if (act.e !== undefined && act.v !== context.v) {
    act.v = context.v;
    var match = context.u;
    var match$1 = context.r;
    if (match !== undefined) {
      act.e.splice(act.e.indexOf(match), 1);
    } else if (match$1 !== undefined) {
      act.e.push(match$1);
    }
    
  }
  return act.s;
}

function set(act, state) {
  if (act.e === undefined) {
    return ;
  }
  act.s = state;
  if (context.q.push(act.e) === 1) {
    Promise.resolve(undefined).then(function (param) {
          getNotify(undefined)();
        });
  }
  act.e = [];
  if (act.v === context.v) {
    return ;
  }
  act.v = context.v;
  var match = context.u;
  var match$1 = context.r;
  if (match !== undefined) {
    act.e.splice(act.e.indexOf(match), 1);
    return ;
  } else if (match$1 !== undefined) {
    act.e.push(match$1);
    return ;
  } else {
    return ;
  }
}

function subscribe(act, cb) {
  var subscribtionContext = {
    q: cb,
    s: cb
  };
  var effect = function () {
    if (subscribtionContext.q === context.q) {
      return ;
    }
    subscribtionContext.q = context.q;
    context.v = context.v + 1;
    var prevRoot = context.r;
    context.r = effect;
    return callWithFinally((function () {
                  var calculatedState = get(act);
                  if (subscribtionContext.s !== calculatedState) {
                    subscribtionContext.s = calculatedState;
                    return cb(calculatedState);
                  }
                  
                }), (function () {
                  context.r = prevRoot;
                }));
  };
  effect();
  return function (param) {
    context.v = context.v + 1;
    context.u = effect;
    get(act);
    context.u = undefined;
  };
}

exports.make = make;
exports.get = get;
exports.set = set;
exports.subscribe = subscribe;
exports.getNotify = getNotify;
exports.setNotify = setNotify;
/* No side effect */
